/*
Name: Daniel Getahun
purpose: Final Exam database assignment
*/

const express = require('express');
const cors = require('cors');
const mysql = require('mysql');
const { v4: uuidv4 } = require('uuid');
const HTTP_PORT = 8000;

const conSchool = mysql.createPool({
    host: "localhost",
    user: "root",
    password: "root",
    database: "facultyHours"
});

const app = express();
app.use(cors());
app.use(express.json());

//view all the schools
app.get("/schools", (req, res, next) => {
    let strCommand = "SELECT SchoolID, Name, City, State FROM tblSchools";
    conSchool.getConnection((err, connection) => {
        if (err) {
            console.log(err);
            return res.status(500).json({ status: "error", message: err });
        }
        
        connection.query(strCommand, (err, result) => {
            connection.release();
            if (err) {
                console.log(err);
                return res.status(500).json({ status: "error", message: err });
            }
            res.status(200).json({ status: "success", SchoolList: result });
        });
    });
});


// Register (endpoint: users; function create)(complete)
app.post("/users", (req, res, next) => {

    let strEmail = req.query.Email;
    let strPassword = req.query.Password;
    let strFirstName = req.query.FirstName;
    let strLastName = req.query.LastName;
    let strPhoneNumber = req.query.PhoneNumber
    let strSchoolID = req.query.SchoolID;
    let strFacultyID = uuidv4();
    
    let strCommand = 'INSERT INTO tblFaculty (FacultyID, FirstName, LastName, Email, Password, PhoneNumber, SchoolID) VALUES (?, ?, ? , ?, ?, ?, ?)';
    let strCommand2 = 'SELECT * FROM tblFaculty WHERE Email = ? AND SchoolID = ?';
    
    conSchool.getConnection(function (err, connection) {
        if (err) {
            console.log(err);
            res.status(500).json({ status: "error", message: err });
        } else {
            //check if email and school id exits already 
            connection.query(strCommand2, [strEmail, strSchoolID], function (err, result) {
                if (err) {
                    console.log(err);
                    res.status(500).json({ status: "error", message: err });
                } else if (result.length > 0) {
                    res.status(409).json({ status: "error", message: "User already exists" });
                } else {
                    //contine with insert 
                    connection.query(strCommand, [strFacultyID, strFirstName, strLastName, strEmail, strPassword, strPhoneNumber, strSchoolID], function (err, insertResult) {
                        if (err) {
                            console.log(err);
                            res.status(500).json({ status: "error", message: err });
                        } else {
                            res.status(201).json({ 
                                message: "User registered successfully",
                                FacultyID: strFacultyID
                            });
                        }
                    });
                }
            });
        }
        connection.release();
    });
});

//Login (endpoint: sessions; function create)(completed)
app.post("/sessions", (req, res, next) => {
    let strEmail = req.query.Email;
    let strPassword = req.query.Password;
    let strSessionID = uuidv4();

    let validateUserQuery = 'SELECT COUNT(*) AS total FROM tblFaculty WHERE Email = ? AND Password = ?';
    let insertSessionQuery = 'INSERT INTO tblSessions (SessionID, Duration, Email) VALUES (?, NOW(), ?)';

    conSchool.getConnection(function (err, connection) {
        if (err) {
            console.log(err);
            res.status(500).json({ status: "error", message: err });
        } else {
            //validate if the user existes
            connection.query(validateUserQuery, [strEmail, strPassword], function (err, result) {
                if (err) {
                    console.log(err);
                    res.status(500).json({ status: "error", message: err });
                } else if (result[0].total > 0) {
                    //user does exists
                    connection.query(insertSessionQuery, [strSessionID, strEmail], function (err, insertResult) {
                        if (err) {
                            console.log(err);
                            res.status(500).json({ status: "error", message: err });
                        } else {
                            res.status(200).json({ status: "success", sessionID: strSessionID });
                        }
                    });
                } else {
                    res.status(401).json({ status: "error", message: "Invalid email or password" });
                }
            });
        }
        connection.release();
    });
});

// Logout (endpoint: sessions; function delete)
app.delete("/sessions", (req, res, next) => {
    let strEmail = req.query.Email;
    let deleteSessionQuery = "DELETE FROM tblSessions WHERE Email = ?";
    conSchool.getConnection((err, connection) => {
        if (err) {
            console.log(err);
            res.status(500).json({ status: "error", message: err });
        } else {
            // Delete the user's session
            connection.query(deleteSessionQuery, [strEmail], (err, result) => {
                if (err) {
                    console.log(err);
                    res.status(500).json({ status: "error", message: err });
                } else if (result.affectedRows > 0) {
                    res.status(200).json({ status: "success", message: "Logged out successfully" });
                } else {
                    res.status(404).json({ status: "error", message: "Session not found" });
                }
            });
        }
        connection.release();
    });
});


//View office hours (endpoint: profhours; function read)
app.get("/profhours", (req, res, next) => {
    let strEmail = req.query.Email;
    
    let query = "SELECT * FROM tblOfficeHours WHERE Email = ?";
    conSchool.getConnection((err, connection) => {
        if (err) {
            console.log(err);
            res.status(500).json({ status: "error", message: err });
        } else {
            connection.query(query, [strEmail], (err, result) => {
                if (err) {
                    console.log(err);
                    res.status(500).json({ status: "error", message: err });
                } else {
                    res.status(200).json(result);
                }
            });
        }
        connection.release();
    });
});


//Update office hours (endpoint: profhours; function update)
app.put("/profhours", (req, res, next) => {
    let { Email, Day, StartTime, EndTime } = req.query;

    let query = "UPDATE tblOfficeHours SET Day = ?, StartTime = ?, EndTime = ? WHERE Email = ?";
    conSchool.getConnection((err, connection) => {
        if (err) {
            console.log(err);
            res.status(500).json({ status: "error", message: err });
        } else {
            connection.query(query, [Day, StartTime, EndTime, Email], (err, result) => {
                if (err) {
                    console.log(err);
                    res.status(500).json({ status: "error", message: err });
                } else {
                    res.status(200).json({ status: "success", message: "Office hours updated" });
                }
            });
        }
        connection.release();
    });
});

//Delete office hours (endpoint: profhours; function delete)
app.delete("/profhours", (req, res, next) => {
    let strEmail = req.query.Email;

    let query = "DELETE FROM tblOfficeHours WHERE Email = ?";
    conSchool.getConnection((err, connection) => {
        if (err) {
            console.log(err);
            res.status(500).json({ status: "error", message: err });
        } else {
            connection.query(query, [strEmail], (err, result) => {
                if (err) {
                    console.log(err);
                    res.status(500).json({ status: "error", message: err });
                } else {
                    res.status(200).json({ status: "success", message: "Office hours deleted" });
                }
            });
        }
        connection.release();
    });
});


//View notes (endpoint: profnotes; function read)
app.get("/profnotes", (req, res, next) => {
    let strEmail = req.query.Email;

    let query = "SELECT * FROM tblNote WHERE Email = ?";
    conSchool.getConnection((err, connection) => {
        if (err) {
            console.log(err);
            res.status(500).json({ status: "error", message: err });
        } else {
            connection.query(query, [strEmail], (err, result) => {
                if (err) {
                    console.log(err);
                    res.status(500).json({ status: "error", message: err });
                } else {
                    res.status(200).json(result);
                }
            });
        }
        connection.release();
    });
});


//Mark notes (endpoint: profnotes; function update)
app.put("/profnotes", (req, res, next) => {
    let { NoteID, AddNote } = req.query;

    let strCommand = "UPDATE tblNote SET AddNote = ? WHERE NoteID = ?";
    conSchool.getConnection((err, connection) => {
        if (err) {
            console.log(err);
            res.status(500).json({ status: "error", message: err });
        } else {
            connection.query(strCommand, [AddNote, NoteID], (err, result) => {
                if (err) {
                    console.log(err);
                    res.status(500).json({ status: "error", message: err });
                } else {
                    res.status(200).json({ status: "success", message: result });
                }
            });
        }
        connection.release();
    });
});





app.listen(HTTP_PORT, () => {
    console.log(`App listening on port ${HTTP_PORT}`);
});

